// Generated by dts-bundle v0.7.3-fork.1
// Dependencies for this module:
//   ../../../../../@fullcalendar/core
//   ../../../../../@fullcalendar/daygrid

declare module '@fullcalendar/timegrid' {
    import AbstractTimeGridView from '@fullcalendar/timegrid/AbstractTimeGridView';
    import TimeGridView, { buildDayTable } from '@fullcalendar/timegrid/TimeGridView';
    import { TimeGridSeg } from '@fullcalendar/timegrid/TimeGrid';
    import { TimeGridSlicer, buildDayRanges } from '@fullcalendar/timegrid/SimpleTimeGrid';
    export { TimeGridView, AbstractTimeGridView, buildDayTable, buildDayRanges, TimeGridSlicer, TimeGridSeg };
    export { default as TimeGrid } from '@fullcalendar/timegrid/TimeGrid';
    const _default: import("@fullcalendar/core").PluginDef;
    export default _default;
}

declare module '@fullcalendar/timegrid/AbstractTimeGridView' {
    import { ScrollComponent, View, ComponentContext, Duration, ViewProps } from '@fullcalendar/core';
    import { DayGrid } from '@fullcalendar/daygrid';
    import TimeGrid from '@fullcalendar/timegrid/TimeGrid';
    import AllDaySplitter from '@fullcalendar/timegrid/AllDaySplitter';
    export { AbstractTimeGridView as default, AbstractTimeGridView };
    abstract class AbstractTimeGridView extends View {
        timeGrid: TimeGrid;
        dayGrid: DayGrid;
        scroller: ScrollComponent;
        axisWidth: any;
        protected splitter: AllDaySplitter;
        render(props: ViewProps, context: ComponentContext): void;
        destroy(): void;
        _renderSkeleton(context: ComponentContext): void;
        _unrenderSkeleton(): void;
        renderSkeletonHtml(): string;
        getNowIndicatorUnit(): string;
        unrenderNowIndicator(): void;
        updateSize(isResize: boolean, viewHeight: number, isAuto: boolean): void;
        updateBaseSize(isResize: any, viewHeight: any, isAuto: any): void;
        computeScrollerHeight(viewHeight: any): number;
        computeDateScroll(duration: Duration): {
            top: any;
        };
        queryDateScroll(): {
            top: number;
        };
        applyDateScroll(scroll: any): void;
        renderHeadIntroHtml: () => string;
        axisStyleAttr(): string;
        renderTimeGridBgIntroHtml: () => string;
        renderTimeGridIntroHtml: () => string;
        renderDayGridBgIntroHtml: () => string;
        renderDayGridIntroHtml: () => string;
    }
}

declare module '@fullcalendar/timegrid/TimeGridView' {
    import { DateProfileGenerator, DateProfile, ComponentContext, DayHeader, DayTable, ViewProps } from '@fullcalendar/core';
    import { SimpleDayGrid } from '@fullcalendar/daygrid';
    import SimpleTimeGrid from '@fullcalendar/timegrid/SimpleTimeGrid';
    import AbstractTimeGridView from '@fullcalendar/timegrid/AbstractTimeGridView';
    export { TimeGridView as default, TimeGridView };
    class TimeGridView extends AbstractTimeGridView {
        header: DayHeader;
        simpleDayGrid: SimpleDayGrid;
        simpleTimeGrid: SimpleTimeGrid;
        render(props: ViewProps, context: ComponentContext): void;
        _renderSkeleton(context: ComponentContext): void;
        _unrenderSkeleton(): void;
        renderNowIndicator(date: any): void;
    }
    export function buildDayTable(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator): DayTable;
}

declare module '@fullcalendar/timegrid/TimeGrid' {
    import { PositionCache, Duration, DateMarker, DateFormatter, ComponentContext, DateComponent, Seg, EventSegUiInteractionState, DateProfile, Theme } from '@fullcalendar/core';
    export interface RenderProps {
        renderBgIntroHtml: () => string;
        renderIntroHtml: () => string;
    }
    export interface TimeGridSeg extends Seg {
        col: number;
        start: DateMarker;
        end: DateMarker;
    }
    export interface TimeGridCell {
        date: DateMarker;
        htmlAttrs?: string;
    }
    export interface TimeGridProps {
        dateProfile: DateProfile;
        cells: TimeGridCell[];
        businessHourSegs: TimeGridSeg[];
        bgEventSegs: Tim